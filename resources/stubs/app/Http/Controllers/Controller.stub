<?php

namespace DummyNamespace;

use DummyFullBaseClass;
use DummyFullRequestClass;
use Illuminate\Http\Request;
use DummyFullRepositoryInterface;
use Recca0120\Repository\Criteria;

class DummyClass extends DummyBaseClass
{
    /**
     * $dummyRepository.
     *
     * @param \DummyFullRepositoryInterface
     */
    protected $dummyRepository;

    /**
     * Create a new controller instance.
     *
     * @param \DummyFullRepositoryInterface $dummyRepository
     */
    public function __construct(DummyRepositoryInterface $dummyRepository)
    {
        $this->dummyRepository = $dummyRepository;
    }

    /**
     * Display a listing of the resource.
     *
     * @param \Illuminate\Http\Request $request
     * @return \Illuminate\Http\Response
     */
    public function index(Request $request)
    {
        $criteria = Criteria::create();

        if ($request->has('sort') === true) {
            $criteria->orderBy($request->get('sort'), $request->get('dir'));
        } else {
            $criteria->orderBy('id', 'asc');
        }

        $criteria->where(function ($criteria) use ($request) {
            if ($request->has('id') === true) {
                $criteria->where('id', 'like', '%'.$request->get('id').'%');
            }

            return $criteria;
        });

        $dummyCollection = $this->dummyRepository
            ->paginate($criteria)
            ->appends($request->all());

        return response()->view('dummyView.index', compact('dummyCollection'));
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        $dummyModel = $this->dummyRepository->newInstance([]);

        return response()->view('dummyView.create', compact('dummyModel'));
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param \DummyFullRequestClass $request
     * @return \Illuminate\Http\RedirectResponse
     */
    public function store(DummyRequestClass $request)
    {
        $attributes = $request->all();
        $dummyModel = $this->dummyRepository->create($attributes);

        return response()
            ->redirectToRoute('dummyRoute.index', $request->query())
            ->with('success', $dummyModel->name.' saved successfully.');
    }

    /**
     * Display the specified resource.
     *
     * @param string $id
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        //
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param string $id
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        $dummyModel = $this->dummyRepository->find($id);

        if (is_null($dummyModel) === true) {
            return redirect()
                ->back()
                ->with('error', 'not found');
        }

        return response()->view('dummyView.edit', compact('dummyModel'));
    }

    /**
     * Update the specified resource in storage.
     *
     * @param \DummyFullRequestClass $request
     * @param string $id
     * @return \Illuminate\Http\RedirectResponse
     */
    public function update(DummyRequestClass $request, $id)
    {
        $attributes = $request->all();
        $dummyModel = $this->dummyRepository->update($id, $attributes);

        return response()
            ->redirectToRoute('dummyRoute.index', $request->query())
            ->with('success', $dummyModel->name.' updated successfully.');
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param \Illuminate\Http\Request $request
     * @param string $id
     * @return \Illuminate\Http\RedirectResponse
     */
    public function destroy(Request $request, $id)
    {
        $dummyModel = $this->dummyRepository->find($id);

        if (is_null($dummyModel) === true) {
            return redirect()
                ->back()
                ->with('error', 'not found');
        }

        $this->dummyRepository->delete($id);

        return response()
            ->redirectToRoute('dummyRoute.index', $request->query())
            ->with('success', $dummyModel->name.' deleted successfully.');
    }
}
